<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>PisoWiFi Dashboard - Demo</title>
  <style>
    body { font-family: system-ui, -apple-system, Roboto, "Segoe UI", Arial; max-width:900px; margin:24px auto; padding:0 16px; color:#111; }
    header { display:flex; justify-content:space-between; align-items:center; margin-bottom:18px; }
    input, button, select, textarea { padding:8px; border:1px solid #ddd; border-radius:6px; font-size:14px; }
    button { cursor:pointer; background:#0366d6; color:#fff; border:none; }
    .row { display:flex; gap:8px; margin-bottom:8px; }
    .card { border:1px solid #eee; padding:12px; border-radius:8px; margin-bottom:10px; background:#fff; }
    #sales { margin-top:12px; }
    .muted { color:#666; font-size:13px; }
    small { color:#666; }
  </style>
</head>
<body>
  <header>
    <h1>PisoWiFi Demo</h1>
    <div id="auth-area">
      <button id="btn-signin">Sign in (magic link)</button>
      <button id="btn-signout" style="display:none">Sign out</button>
    </div>
  </header>

  <section class="card">
    <h3>Mag-send ng test sale</h3>
    <div class="row">
      <input id="device_key" placeholder="device_key" value="device-01" />
      <input id="vendo" placeholder="vendo" value="VND-01" />
      <input id="amount" type="number" step="0.01" placeholder="amount" value="25.00" />
      <input id="txn" placeholder="txn" value="TXN-TEST-001" />
      <button id="btn-send">Send</button>
    </div>
    <div class="muted">Header X-Webhook-Secret hindi kailangan dito; ang page na ito gumagamit ng Supabase client para magbasa/insert nang direktang may authenticated user.</div>
  </section>

  <section class="card">
    <h3>Sales (latest 20)</h3>
    <div id="sales" aria-live="polite"></div>
  </section>

  <script type="module">
    // ====== CONFIGURE THESE ======
    const SUPABASE_URL = "https://bxtwtwtwvbhpyvptkkao.supabase.co";
    const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ4dHd0d3R3dmJocHl2cHRra2FvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2NTQyMTAsImV4cCI6MjA3NjIzMDIxMH0.eYdLXMb8xb5SYIuTSg239NxqhEQlC331KN3ivTuDGFA";
    // ============================

    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // UI elements
    const btnSignIn = document.getElementById("btn-signin");
    const btnSignOut = document.getElementById("btn-signout");
    const btnSend = document.getElementById("btn-send");
    const salesDiv = document.getElementById("sales");

    // --- Authentication (magic link) ---
    btnSignIn.addEventListener("click", async () => {
      const email = prompt("Enter email for magic link sign in:");
      if (!email) return;
      const { error } = await supabase.auth.signInWithOtp({ email });
      if (error) alert("Sign in failed: " + error.message); else alert("Magic link sent. Check your email.");
    });

    btnSignOut.addEventListener("click", async () => {
      await supabase.auth.signOut();
      updateAuthUI();
    });

    supabase.auth.onAuthStateChange((_event, session) => {
      updateAuthUI();
    });

    function updateAuthUI() {
      const user = supabase.auth.getUser().then(r => r.data.user).catch(()=>null);
      Promise.resolve(user).then(u => {
        if (u) {
          btnSignIn.style.display = "none";
          btnSignOut.style.display = "inline-block";
        } else {
          btnSignIn.style.display = "inline-block";
          btnSignOut.style.display = "none";
        }
      });
    }

    // --- Fetch latest sales ---
    async function loadSales() {
      salesDiv.innerHTML = "<small>Loading...</small>";
      const { data, error } = await supabase
        .from("sales")
        .select("id, tenant_id, device_key, vendo, amount, txn, ts, created_at")
        .order("created_at", { ascending: false })
        .limit(20);
      if (error) {
        salesDiv.innerHTML = <div class="muted">Error loading sales: ${error.message}</div>;
        return;
      }
      if (!data || data.length === 0) {
        salesDiv.innerHTML = "<div class='muted'>Walang sales records.</div>";
        return;
      }
      salesDiv.innerHTML = data.map(s => {
        return `<div class="card">
          <div><strong>${s.vendo}</strong> — ${s.device_key} — <small>${new Date(s.ts || s.created_at).toLocaleString()}</small></div>
          <div><strong>PHP ${Number(s.amount).toFixed(2)}</strong> — txn: ${s.txn} — id: ${s.id}</div>
        </div>`;
      }).join("");
    }

    // --- Insert a sale (client-side example) ---
    btnSend.addEventListener("click", async () => {
      const device_key = document.getElementById("device_key").value.trim();
      const vendo = document.getElementById("vendo").value.trim();
      const amount = parseFloat(document.getElementById("amount").value);
      const txn = document.getElementById("txn").value.trim();
      const ts = new Date().toISOString();

      if (!device_key || !vendo || !txn || !amount) {
        alert("Please fill required fields.");
        return;
      }

      const payload = { device_key, vendo, amount, txn, ts };

      // Insert directly to Supabase sales table (requires RLS or authenticated role with insert permission)
      const { data, error } = await supabase
        .from("sales")
        .insert([{ ...payload }])
        .select();

      if (error) {
        alert("Insert failed: " + error.message);
      } else {
        alert("Sale recorded.");
        loadSales();
      }
    });

    // initial load
    loadSales();
    updateAuthUI();
  </script>
</body>
</html>
